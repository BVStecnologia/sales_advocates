# COMANDOS GIT PARA O PROJETO LIFTLIO

# PUXAR ATUALIZAÇÕES DO GITHUB (MÉTODO SEGURO)
git fetch --all
git pull origin main

# PUXAR ATUALIZAÇÕES DO GITHUB (MÉTODO ALTERNATIVO - CUIDADO!)
# ATENÇÃO: Este método descarta TODAS as alterações locais não enviadas!
# Use apenas se tiver certeza que não perderá trabalho importante
 git fetch --all
 git reset --hard origin/main
 git clean -fd  # Remove arquivos não rastreados (incluindo novos arquivos)

# ENVIAR ALTERAÇÕES PARA O GITHUB
git add .
git commit -m "Descrição das alterações"
git push

# VERIFICAR STATUS
git status

# VER HISTÓRICO DE ALTERAÇÕES
git log --oneline

# VER HISTÓRICO DE REFERÊNCIAS (ÚTIL PARA RECUPERAR COMMITS PERDIDOS)
git reflog

# CRIAR UMA NOVA BRANCH
git checkout -b nome-da-nova-branch

# MUDAR PARA OUTRA BRANCH
git checkout nome-da-branch

# LISTAR TODAS AS BRANCHES
git branch -a

# SALVAR ALTERAÇÕES TEMPORARIAMENTE SEM COMMIT
git stash
git stash pop  # para recuperar as alterações salvas

# DESFAZER ALTERAÇÕES DE FORMA SEGURA

# Desfazer o último commit (mantendo as alterações nos arquivos)
git reset --soft HEAD~1

# Desfazer um commit específico sem perder outros commits
git revert <commit-hash>

# Recuperar commits perdidos após um reset hard
# 1. Ver histórico de todas as ações (incluindo commits perdidos)
git reflog
# 2. Recuperar um commit específico
git checkout <hash-do-commit>
# 3. Criar uma nova branch para salvar o estado recuperado
git branch nova-branch

# LIDAR COM ARQUIVOS GRANDES

# O GitHub tem um limite de 100MB por arquivo
# Evite adicionar arquivos grandes como:
# - Arquivos de instalação (.dmg, .exe, etc)
# - Bancos de dados
# - Arquivos de mídia grandes (vídeos, áudios)

# Se precisar remover um arquivo grande do histórico do Git:
git filter-branch --force --index-filter "git rm --cached --ignore-unmatch 'caminho/para/arquivo-grande'" --prune-empty --tag-name-filter cat -- --all
git push --force
